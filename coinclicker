<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <title>Coin Clicker (met opslaan)</title>
  <style>
    body { font-family: Arial, sans-serif; background:#f4f6f8; padding:20px; color:#111 }
    .wrap { display:flex; gap:30px; align-items:flex-start; }
    .left-side { width:360px; }
    .coin-icon { width:120px; cursor:pointer; display:block; }
    .coin-counter { font-size:20px; margin:10px 0; }
    .theme-display { display:flex; align-items:center; gap:12px; margin:10px 0; }
    .theme-display img { width:60px; height:60px; object-fit:contain; display:block; }
    .purchases { margin-top:18px; }
    .buttons { display:flex; flex-direction:column; gap:8px; }
    .controls { margin-top:12px; display:flex; gap:8px; }
    button { padding:8px 12px; border-radius:6px; border:1px solid #ccc; background:#fff; cursor:pointer; }
    button:disabled { opacity:0.5; cursor:not-allowed; }
    ul { padding-left:18px; }
  </style>
</head>
<body>
  <h1>Coin Clicker</h1>

  <div class="wrap">
    <div class="left-side">
      <img src="Coin.png" class="coin-icon" alt="Coin">
      <div class="coin-counter">Coins: 0</div>

      <div class="theme-display">
        <img class="theme-icon" alt="Theme" style="display:none;">
        <div class="theme-label">Theme:</div>
      </div>

      <div class="purchases">
        <h3>Gekochte upgrades:</h3>
        <ul class="purchases-list"></ul>
      </div>

      <div class="controls">
        <button id="btn-reset">Reset progress</button>
      </div>
    </div>

    <div class="buttons" aria-live="polite"></div>
  </div>

  <script>
    // --- constante voor opslag ---
    const SAVE_KEY = 'coinClicker_save_v1';

    // Thema's (zorg dat deze images in dezelfde map staan)
    const THEMES = [
      { name: "Bank", file: "bank.png" },
      { name: "Exchange", file: "exchange.png" },
      { name: "Global Trade", file: "global_trade.png" },
      { name: "Kingdom", file: "kingdom.png" },
      { name: "Stock Market", file: "Stock_market.png" },
      { name: "Tax", file: "tax.png" },
      { name: "Wallet", file: "wallet.png" }
    ];

    // --- Upgrade klasse ---
    class Upgrade {
      constructor({ id, cost, clickPower = 0, autoCoins = 0, themeIndex = 0 }) {
        this.id = id;
        this.cost = cost;
        this.clickPower = clickPower;
        this.autoCoins = autoCoins;
        this.themeIndex = themeIndex;
        this.count = 0;
      }

      // Probeer te kopen; retourneert true als succesvolle aankoop
      buy(game) {
        if (game.coins >= this.cost) {
          game.coins -= this.cost;
          this.count++;
          game.recalculate();            // herbereken clickPower & autoCoins
          game.setTheme(this.themeIndex);// update theme
          game.save();                   // direct opslaan na aankoop
          return true;
        }
        return false;
      }
    }

    // --- Game klasse ---
    class Game {
      constructor() {
        this.coins = 0;
        this.baseClickPower = 1;
        this.clickPower = this.baseClickPower;
        this.autoCoins = 0;
        this.upgrades = [];
        this.lastThemeIndex = null; // laatste actieve theme index
        this.ui = new UI(this);
      }

      addUpgrade(upg) {
        this.upgrades.push(upg);
      }

      // Herbereken afgeleide waarden op basis van upgrade.count
      recalculate() {
        // clickPower = base + sum(upgrade.clickPower * count)
        this.clickPower = this.baseClickPower + this.upgrades.reduce((s,u) => s + (u.clickPower * u.count), 0);
        // autoCoins = sum(upgrade.autoCoins * count)
        this.autoCoins = this.upgrades.reduce((s,u) => s + (u.autoCoins * u.count), 0);
      }

      click() {
        this.coins += this.clickPower;
        this.ui.update();
      }

      tick() {
        if (this.autoCoins !== 0) {
          // autoCoins elke seconde toevoegen
          this.coins += this.autoCoins;
        }
        // UI update (UI methode beslist hoe vaak rerender)
        this.ui.update();
      }

      setTheme(themeIndex) {
        if (themeIndex == null || THEMES[themeIndex] == null) return;
        const themeObj = THEMES[themeIndex];
        const icon = document.querySelector(".theme-icon");
        const label = document.querySelector(".theme-label");
        icon.src = themeObj.file;
        icon.style.display = "block";
        label.innerText = `${themeObj.name}`;
        this.lastThemeIndex = themeIndex;
      }

      // === opslag en laden ===
      save() {
        try {
          const data = {
            coins: Number(this.coins),
            upgrades: this.upgrades.map(u => ({ id: u.id, count: u.count })),
            lastThemeIndex: this.lastThemeIndex
          };
          localStorage.setItem(SAVE_KEY, JSON.stringify(data));
        } catch (err) {
          console.error('Opslaan mislukt:', err);
        }
      }

      load() {
        try {
          const raw = localStorage.getItem(SAVE_KEY);
          if (!raw) return false;
          const data = JSON.parse(raw);
          // zet waarden
          this.coins = Number(data.coins || 0);
          // herstel upgrade-aantallen
          if (Array.isArray(data.upgrades)) {
            data.upgrades.forEach(saved => {
              const u = this.upgrades.find(x => x.id === saved.id);
              if (u) u.count = Number(saved.count || 0);
            });
          }
          // herbereken afgeleide waarden
          this.recalculate();
          // restore theme indien aanwezig
          if (data.lastThemeIndex != null && THEMES[data.lastThemeIndex]) {
            this.setTheme(data.lastThemeIndex);
          } else {
            // geen theme -> verberg icoon
            document.querySelector(".theme-icon").style.display = "none";
            document.querySelector(".theme-label").innerText = 'Theme:';
            this.lastThemeIndex = null;
          }
          return true;
        } catch (err) {
          console.error('Laden mislukt:', err);
          return false;
        }
      }

      clearSave() {
        localStorage.removeItem(SAVE_KEY);
        // reset in-memory state
        this.coins = 0;
        this.upgrades.forEach(u => u.count = 0);
        this.recalculate();
        this.lastThemeIndex = null;
        // UI reset
        document.querySelector(".theme-icon").style.display = "none";
        document.querySelector(".theme-label").innerText = 'Theme:';
        this.save();
        this.ui.update();
      }

      exportSave() {
        const raw = localStorage.getItem(SAVE_KEY) || JSON.stringify({ coins:0, upgrades:[], lastThemeIndex:null });
        return raw;
      }

      importSave(jsonString) {
        try {
          const data = JSON.parse(jsonString);
          localStorage.setItem(SAVE_KEY, JSON.stringify(data)); // schrijf naar storage
          // herlaad in-memory
          // eerst reset counts zodat load() niet optelt
          this.upgrades.forEach(u => u.count = 0);
          this.load();
          this.ui.update();
          return true;
        } catch (e) {
          console.error('Import mislukt', e);
          return false;
        }
      }
    }

    // --- UI klasse (DOM handling) ---
    class UI {
      constructor(game) {
        this.game = game;
        this.coinCounter = document.querySelector(".coin-counter");
        this.purchasesList = document.querySelector(".purchases-list");
        this.buttonsDiv = document.querySelector(".buttons");
        this.coinIcon = document.querySelector(".coin-icon");

        // klik op munt
        this.coinIcon.addEventListener("click", () => {
          this.game.click();
        });

        // Export / Import / Reset knoppen
        document.getElementById('btn-reset').addEventListener('click', () => {
          if (confirm('Weet je zeker dat je je progress wilt resetten?')) {
            this.game.clearSave();
          }
        });

      }

      // Bouw de knoppen op basis van upgrades
      renderButtons() {
        this.buttonsDiv.innerHTML = '';
        this.game.upgrades.forEach((upg, idx) => {
          const btn = document.createElement('button');
          btn.textContent = `${THEMES[upg.themeIndex].name} (${upg.cost} Coins)`;
          btn.dataset.upgradeIdx = idx;
          btn.addEventListener('click', () => {
            const success = upg.buy(this.game);
            if (success) {
              this.update();
            } else {
              // Optioneel: feedback
              alert('Niet genoeg coins!');
            }
          });
          this.buttonsDiv.appendChild(btn);
        });
        // initial disable/update
        this.update(); 
      }

      // Update UI (counter, gekochte items, button disabled state)
      update() {
        // nette weergave (geen floats)
        this.coinCounter.innerText = `Coins: ${Math.floor(this.game.coins)} (+${this.game.clickPower} per klik)`;

        // purchases list
        this.purchasesList.innerHTML = '';
        this.game.upgrades.forEach(u => {
          if (u.count > 0) {
            const li = document.createElement('li');
            li.textContent = `${THEMES[u.themeIndex].name} gekocht: ${u.count}x`;
            this.purchasesList.appendChild(li);
          }
        });

        // buttons: disable waar nodig
        const btns = this.buttonsDiv.querySelectorAll('button');
        btns.forEach(btn => {
          const idx = Number(btn.dataset.upgradeIdx);
          const upg = this.game.upgrades[idx];
          btn.disabled = this.game.coins < upg.cost;
        });
      }
    }

    // --- Startup: game en upgrades maken ---
    const game = new Game();

    // Definieer upgrades (zelfde waarden als je oude versie)
    game.addUpgrade(new Upgrade({ id: 1, cost: 10, clickPower: 1, autoCoins: 1, themeIndex: 0 }));
    game.addUpgrade(new Upgrade({ id: 2, cost: 50, clickPower: 2, autoCoins: 5, themeIndex: 1 }));
    game.addUpgrade(new Upgrade({ id: 3, cost: 100, clickPower: 3, autoCoins: 10, themeIndex: 2 }));
    game.addUpgrade(new Upgrade({ id: 4, cost: 1000, clickPower: 5, autoCoins: 100, themeIndex: 3 }));
    game.addUpgrade(new Upgrade({ id: 5, cost: 2000, clickPower: 10, autoCoins: 200, themeIndex: 4 }));
    game.addUpgrade(new Upgrade({ id: 6, cost: 10000, clickPower: 20, autoCoins: 1000, themeIndex: 5 }));
    game.addUpgrade(new Upgrade({ id: 7, cost: 50000, clickPower: 50, autoCoins: 5000, themeIndex: 6 }));

    // render knoppen en probeer te laden
    game.ui.renderButtons();
    const loaded = game.load();
    // update UI na load
    game.ui.update();

    // tick per seconde: auto inkomsten
    setInterval(() => {
      game.tick();
    }, 1000);

    // autosave elke 5 seconden
    setInterval(() => {
      game.save();
    }, 5000);

    // save bij tab sluiten / reload
    window.addEventListener('beforeunload', () => {
      game.save();
    });

  </script>
</body>
</html>
